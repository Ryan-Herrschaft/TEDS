)
server <- function(input, output) {
output$screening_count <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$screening_prop <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Proportion"
)
}
)
output$setting_count <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$setting_prop <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel(
h1(
"Generic Study Overview Panel")
),
mainPanel(
p("Description of the project and why we are creating this application.
")
),
titlePanel(
h2("Visualzing Availibility of Screening Services Across Nebraskan CBSA Regions", align = "left")
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "screening_input",
label = "Select the screening services you are interested in",
choices  = retrieve_names(joined, "Screening & Testing")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "screening_count")),
tabPanel("Proportion", plotOutput(outputId = "screening_prop"))
)
)
),
titlePanel("Visualzing Availibility of Service Settings Across Nebraskan CBSA Regions"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "setting_input",
label = "Select the service setting you are interested in",
choices  = retrieve_names(joined, "Service Settings (e.g., Outpatient, Residential, Inpatient, etc.)")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "setting_count")),
tabPanel("Proportion", plotOutput("setting_prop"))
)
)
),
mainPanel()
)
server <- function(input, output) {
output$screening_count <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$screening_prop <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Proportion"
)
}
)
output$setting_count <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$setting_prop <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel(
h1(
"Generic Study Overview Panel")
),
mainPanel(
p("Description of the project and why we are creating this application.
")
),
div(
titlePanel(
h2("Visualzing Availibility of Screening Services Across Nebraskan CBSA Regions", align = "left")
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "screening_input",
label = "Select the screening services you are interested in",
choices  = retrieve_names(joined, "Screening & Testing")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "screening_count")),
tabPanel("Proportion", plotOutput(outputId = "screening_prop"))
)
)
)
),
titlePanel("Visualzing Availibility of Service Settings Across Nebraskan CBSA Regions"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "setting_input",
label = "Select the service setting you are interested in",
choices  = retrieve_names(joined, "Service Settings (e.g., Outpatient, Residential, Inpatient, etc.)")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "setting_count")),
tabPanel("Proportion", plotOutput("setting_prop"))
)
)
),
mainPanel()
)
server <- function(input, output) {
output$screening_count <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$screening_prop <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Proportion"
)
}
)
output$setting_count <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$setting_prop <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel(
h1(
"Generic Study Overview Panel")
),
mainPanel(
p("Description of the project and why we are creating this application.", includeMarkdown("\n"))
),
div(
titlePanel(
h2("Visualzing Availibility of Screening Services Across Nebraskan CBSA Regions", align = "left")
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "screening_input",
label = "Select the screening services you are interested in",
choices  = retrieve_names(joined, "Screening & Testing")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "screening_count")),
tabPanel("Proportion", plotOutput(outputId = "screening_prop"))
)
)
)
),
titlePanel("Visualzing Availibility of Service Settings Across Nebraskan CBSA Regions"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "setting_input",
label = "Select the service setting you are interested in",
choices  = retrieve_names(joined, "Service Settings (e.g., Outpatient, Residential, Inpatient, etc.)")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "setting_count")),
tabPanel("Proportion", plotOutput("setting_prop"))
)
)
),
mainPanel()
)
library(shiny)
ui <- fluidPage(
titlePanel(
h1(
"Generic Study Overview Panel")
),
mainPanel(
p("Description of the project and why we are creating this application.")
),
titlePanel(
h2("Visualzing Availibility of Screening Services Across Nebraskan CBSA Regions", align = "left")
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "screening_input",
label = "Select the screening services you are interested in",
choices  = retrieve_names(joined, "Screening & Testing")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "screening_count")),
tabPanel("Proportion", plotOutput(outputId = "screening_prop"))
)
)
)
),
library(shiny)
ui <- fluidPage(
titlePanel(
h1(
"Generic Study Overview Panel")
),
mainPanel(
p("Description of the project and why we are creating this application.")
),
titlePanel(
h2("Visualzing Availibility of Screening Services Across Nebraskan CBSA Regions", align = "left")
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "screening_input",
label = "Select the screening services you are interested in",
choices  = retrieve_names(joined, "Screening & Testing")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "screening_count")),
tabPanel("Proportion", plotOutput(outputId = "screening_prop"))
)
)
),
titlePanel("Visualzing Availibility of Service Settings Across Nebraskan CBSA Regions"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "setting_input",
label = "Select the service setting you are interested in",
choices  = retrieve_names(joined, "Service Settings (e.g., Outpatient, Residential, Inpatient, etc.)")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "setting_count")),
tabPanel("Proportion", plotOutput("setting_prop"))
)
)
),
mainPanel()
)
server <- function(input, output) {
output$screening_count <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$screening_prop <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering", str_to_lower(input$screening_input), "across CBSA"),
x = "CBSA Regions",
y = "Proportion"
)
}
)
output$setting_count <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$setting_prop <- renderPlot({
joined %>%
filter(service_name == input$setting_input) %>%
ggplot(aes(CBSA, fill = value)) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering services via the", str_to_lower(input$setting_input), "modality across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Visualzing Availibility of Screening Services Across Nebraskan CBSA Regions"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "screening_input",
label = "Select the screening services you are interested in",
choices  = retrieve_names(joined, "Screening & Testing")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "screening_count")),
tabPanel("Proportion", plotOutput(outputId = "screening_prop"))
)
)
),
titlePanel("Visualzing Availibility of Service Settings Across Nebraskan CBSA Regions"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "setting_input",
label = "Select the service setting you are interested in",
choices  = retrieve_names(joined, "Service Settings (e.g., Outpatient, Residential, Inpatient, etc.)")
)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Counts", plotOutput(outputId = "setting_count")),
tabPanel("Proportion", plotOutput("setting_prop"))
)
)
)
)
server <- function(input, output) {
output$screening_count <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar() +
theme_classic() +
labs(
title = paste("Count of facilities offering", input$screening_input, "across CBSA"),
x = "CBSA Regions",
y = "Count"
)
}
)
output$screening_prop <- renderPlot(
{
joined %>%
filter(service_name == input$screening_input) %>%
ggplot(aes(x= CBSA, fill = value )) +
geom_bar(position = "fill") +
theme_classic() +
labs(
title = paste("Proportion of facilities offering", input$screening_input, "across CBSA"),
x = "CBSA Regions",
y = "Proportion"
) +
theme(
legend.title = 'Service offerings'
)
}
)
}
shinyApp(ui = ui, server = server)
